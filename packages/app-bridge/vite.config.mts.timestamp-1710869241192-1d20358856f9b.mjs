// vite.config.mts
import dts from "file:///Users/samcreasey/frontify/brand-sdk/node_modules/.pnpm/vite-plugin-dts@3.7.3_@types+node@18.19.18_rollup@4.12.0_typescript@5.3.3_vite@5.1.4/node_modules/vite-plugin-dts/dist/index.mjs";
import { viteStaticCopy } from "file:///Users/samcreasey/frontify/brand-sdk/node_modules/.pnpm/vite-plugin-static-copy@1.0.1_vite@5.1.4/node_modules/vite-plugin-static-copy/dist/index.js";
import { defineConfig } from "file:///Users/samcreasey/frontify/brand-sdk/node_modules/.pnpm/vitest@1.3.1_@types+node@18.19.18_@vitest+ui@1.3.1_happy-dom@13.4.1/node_modules/vitest/dist/config.js";

// package.json
var dependencies = {
  immer: "^10.0.3",
  "lodash-es": "^4.17.21",
  mitt: "^3.0.1",
  "type-fest": "^4.10.3"
};
var peerDependencies = {
  react: "^18",
  "react-dom": "^18",
  sinon: "^15 || ^16 || ^17"
};

// vite.config.mts
var dependencies2 = Object.keys(dependencies);
var peerDependencies2 = Object.keys(peerDependencies);
var globals = {
  react: "React",
  "react-dom": "ReactDOM"
};
var vite_config_default = defineConfig({
  plugins: [
    dts({ insertTypesEntry: true, rollupTypes: true }),
    viteStaticCopy({
      targets: [{ src: "./src/workers/upload.worker.js", dest: "." }]
    })
  ],
  build: {
    lib: {
      entry: {
        index: "./src/index.ts",
        testing: "./src/tests/index.ts"
      }
    },
    sourcemap: true,
    minify: true,
    rollupOptions: {
      external: [...dependencies2, ...peerDependencies2]
    }
  },
  test: {
    environment: "happy-dom",
    css: true,
    coverage: {
      all: true,
      reporter: ["text", "lcov"],
      include: ["src/**/*.ts", "src/**/*.tsx"],
      exclude: ["src/**/test.ts", "src/**/test.tsx", "src/**/spec.ts", "src/**/spec.tsx"]
    },
    setupFiles: ["./src/setupTests.ts"]
  }
});
export {
  vite_config_default as default,
  globals
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInBhY2thZ2UuanNvbiJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9zYW1jcmVhc2V5L2Zyb250aWZ5L2JyYW5kLXNkay9wYWNrYWdlcy9hcHAtYnJpZGdlXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvc2FtY3JlYXNleS9mcm9udGlmeS9icmFuZC1zZGsvcGFja2FnZXMvYXBwLWJyaWRnZS92aXRlLmNvbmZpZy5tdHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL3NhbWNyZWFzZXkvZnJvbnRpZnkvYnJhbmQtc2RrL3BhY2thZ2VzL2FwcC1icmlkZ2Uvdml0ZS5jb25maWcubXRzXCI7LyogKGMpIENvcHlyaWdodCBGcm9udGlmeSBMdGQuLCBhbGwgcmlnaHRzIHJlc2VydmVkLiAqL1xuXG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cyc7XG5pbXBvcnQgeyB2aXRlU3RhdGljQ29weSB9IGZyb20gJ3ZpdGUtcGx1Z2luLXN0YXRpYy1jb3B5JztcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGVzdC9jb25maWcnO1xuaW1wb3J0IHsgZGVwZW5kZW5jaWVzIGFzIGRlcGVuZGVuY2llc01hcCwgcGVlckRlcGVuZGVuY2llcyBhcyBwZWVyRGVwZW5kZW5jaWVzTWFwIH0gZnJvbSAnLi9wYWNrYWdlLmpzb24nO1xuXG5jb25zdCBkZXBlbmRlbmNpZXMgPSBPYmplY3Qua2V5cyhkZXBlbmRlbmNpZXNNYXApO1xuY29uc3QgcGVlckRlcGVuZGVuY2llcyA9IE9iamVjdC5rZXlzKHBlZXJEZXBlbmRlbmNpZXNNYXApO1xuXG5leHBvcnQgY29uc3QgZ2xvYmFscyA9IHtcbiAgICByZWFjdDogJ1JlYWN0JyxcbiAgICAncmVhY3QtZG9tJzogJ1JlYWN0RE9NJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gICAgcGx1Z2luczogW1xuICAgICAgICBkdHMoeyBpbnNlcnRUeXBlc0VudHJ5OiB0cnVlLCByb2xsdXBUeXBlczogdHJ1ZSB9KSxcbiAgICAgICAgdml0ZVN0YXRpY0NvcHkoe1xuICAgICAgICAgICAgdGFyZ2V0czogW3sgc3JjOiAnLi9zcmMvd29ya2Vycy91cGxvYWQud29ya2VyLmpzJywgZGVzdDogJy4nIH1dLFxuICAgICAgICB9KSxcbiAgICBdLFxuICAgIGJ1aWxkOiB7XG4gICAgICAgIGxpYjoge1xuICAgICAgICAgICAgZW50cnk6IHtcbiAgICAgICAgICAgICAgICBpbmRleDogJy4vc3JjL2luZGV4LnRzJyxcbiAgICAgICAgICAgICAgICB0ZXN0aW5nOiAnLi9zcmMvdGVzdHMvaW5kZXgudHMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlbWFwOiB0cnVlLFxuICAgICAgICBtaW5pZnk6IHRydWUsXG4gICAgICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgICAgICAgIGV4dGVybmFsOiBbLi4uZGVwZW5kZW5jaWVzLCAuLi5wZWVyRGVwZW5kZW5jaWVzXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRlc3Q6IHtcbiAgICAgICAgZW52aXJvbm1lbnQ6ICdoYXBweS1kb20nLFxuICAgICAgICBjc3M6IHRydWUsXG4gICAgICAgIGNvdmVyYWdlOiB7XG4gICAgICAgICAgICBhbGw6IHRydWUsXG4gICAgICAgICAgICByZXBvcnRlcjogWyd0ZXh0JywgJ2xjb3YnXSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsnc3JjLyoqLyoudHMnLCAnc3JjLyoqLyoudHN4J10sXG4gICAgICAgICAgICBleGNsdWRlOiBbJ3NyYy8qKi90ZXN0LnRzJywgJ3NyYy8qKi90ZXN0LnRzeCcsICdzcmMvKiovc3BlYy50cycsICdzcmMvKiovc3BlYy50c3gnXSxcbiAgICAgICAgfSxcbiAgICAgICAgc2V0dXBGaWxlczogWycuL3NyYy9zZXR1cFRlc3RzLnRzJ10sXG4gICAgfSxcbn0pO1xuIiwgIntcbiAgICBcIm5hbWVcIjogXCJAZnJvbnRpZnkvYXBwLWJyaWRnZVwiLFxuICAgIFwiYXV0aG9yXCI6IFwiRnJvbnRpZnkgRGV2ZWxvcGVycyA8ZGV2ZWxvcGVyc0Bmcm9udGlmeS5jb20+XCIsXG4gICAgXCJ2ZXJzaW9uXCI6IFwiNC4wLjAtYWxwaGEuMTJcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGFja2FnZSB0byBlc3RhYmxpc2ggY29tbXVuaWNhdGlvbiBiZXR3ZWVuIEZyb250aWZ5IGFuZCBtYXJrZXRwbGFjZSBhcHBzXCIsXG4gICAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0Zyb250aWZ5L2JyYW5kLXNka1wiLFxuICAgICAgICBcImRpcmVjdG9yeVwiOiBcInBhY2thZ2VzL2FwcC1icmlkZ2VcIlxuICAgIH0sXG4gICAgXCJzaWRlRWZmZWN0c1wiOiBmYWxzZSxcbiAgICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgICBcIm1haW5cIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgICBcImZpbGVzXCI6IFtcbiAgICAgICAgXCJkaXN0XCIsXG4gICAgICAgIFwicGFja2FnZS5qc29uLmQudHNcIlxuICAgIF0sXG4gICAgXCJleHBvcnRzXCI6IHtcbiAgICAgICAgXCIuXCI6IHtcbiAgICAgICAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuICAgICAgICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgICAgICAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9pbmRleC5qc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLi90ZXN0aW5nXCI6IHtcbiAgICAgICAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvdGVzdGluZy5kLnRzXCIsXG4gICAgICAgICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC90ZXN0aW5nLmpzXCIsXG4gICAgICAgICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvdGVzdGluZy5qc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLi91cGxvYWQtd29ya2VyXCI6IFwiLi9kaXN0L3VwbG9hZC53b3JrZXIuanNcIlxuICAgIH0sXG4gICAgXCJlbmdpbmVzXCI6IHtcbiAgICAgICAgXCJub2RlXCI6IFwiPj0xNlwiXG4gICAgfSxcbiAgICBcInNjcmlwdHNcIjoge1xuICAgICAgICBcImJ1aWxkXCI6IFwidHMtanNvbi1hcy1jb25zdCAuL3BhY2thZ2UuanNvbiAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgICAgIFwiZGV2XCI6IFwidml0ZSBidWlsZCAtLXdhdGNoXCIsXG4gICAgICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXG4gICAgICAgIFwibGludDpmaXhcIjogXCJlc2xpbnQgLS1maXggLlwiLFxuICAgICAgICBcInRlc3RcIjogXCJ2aXRlc3QgcnVuXCIsXG4gICAgICAgIFwidGVzdDp1aVwiOiBcInZpdGVzdCAtLXVpXCIsXG4gICAgICAgIFwidGVzdDp3YXRjaFwiOiBcInZpdGVzdFwiLFxuICAgICAgICBcInRlc3Q6Y292ZXJhZ2VcIjogXCJ2aXRlc3QgcnVuIC0tY292ZXJhZ2VcIixcbiAgICAgICAgXCJ0eXBlY2hlY2tcIjogXCJ0c2MgLS1ub0VtaXRcIlxuICAgIH0sXG4gICAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcImltbWVyXCI6IFwiXjEwLjAuM1wiLFxuICAgICAgICBcImxvZGFzaC1lc1wiOiBcIl40LjE3LjIxXCIsXG4gICAgICAgIFwibWl0dFwiOiBcIl4zLjAuMVwiLFxuICAgICAgICBcInR5cGUtZmVzdFwiOiBcIl40LjEwLjNcIlxuICAgIH0sXG4gICAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcIkBmcm9udGlmeS9lc2xpbnQtY29uZmlnLXJlYWN0XCI6IFwiXjAuMTYuMVwiLFxuICAgICAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjogXCJeMTQuMi4xXCIsXG4gICAgICAgIFwiQHR5cGVzL2xvZGFzaC1lc1wiOiBcIl40LjE3LjEyXCIsXG4gICAgICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuNThcIixcbiAgICAgICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjIuMTlcIixcbiAgICAgICAgXCJAdHlwZXMvc2lub25cIjogXCJeMTcuMC4zXCIsXG4gICAgICAgIFwiQHZpdGVzdC9jb3ZlcmFnZS12OFwiOiBcIl4xLjMuMVwiLFxuICAgICAgICBcIkB2aXRlc3QvdWlcIjogXCJeMS4zLjFcIixcbiAgICAgICAgXCJlc2xpbnRcIjogXCJeOC41Ni4wXCIsXG4gICAgICAgIFwiZXNsaW50LXBsdWdpbi1ub3RpY2VcIjogXCJeMC45LjEwXCIsXG4gICAgICAgIFwiaGFwcHktZG9tXCI6IFwiXjEzLjQuMVwiLFxuICAgICAgICBcIm1pdHRcIjogXCJeMy4wLjFcIixcbiAgICAgICAgXCJtc3dcIjogXCJeMS4zLjJcIixcbiAgICAgICAgXCJwcmV0dGllclwiOiBcIl4zLjIuNVwiLFxuICAgICAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuICAgICAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcbiAgICAgICAgXCJzaW5vblwiOiBcIl4xNy4wLjFcIixcbiAgICAgICAgXCJ0cy1qc29uLWFzLWNvbnN0XCI6IFwiXjEuMC43XCIsXG4gICAgICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjMuM1wiLFxuICAgICAgICBcInZpdGVcIjogXCJeNS4xLjRcIixcbiAgICAgICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMy43LjNcIixcbiAgICAgICAgXCJ2aXRlLXBsdWdpbi1zdGF0aWMtY29weVwiOiBcIl4xLjAuMVwiLFxuICAgICAgICBcInZpdGVzdFwiOiBcIl4xLjMuMVwiXG4gICAgfSxcbiAgICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcInJlYWN0XCI6IFwiXjE4XCIsXG4gICAgICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4XCIsXG4gICAgICAgIFwic2lub25cIjogXCJeMTUgfHwgXjE2IHx8IF4xN1wiXG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUVBLE9BQU8sU0FBUztBQUNoQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjs7O0FDeUN6QixtQkFBZ0I7QUFBQSxFQUNaLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFBQSxFQUNiLE1BQVE7QUFBQSxFQUNSLGFBQWE7QUFDakI7QUEwQkEsdUJBQW9CO0FBQUEsRUFDaEIsT0FBUztBQUFBLEVBQ1QsYUFBYTtBQUFBLEVBQ2IsT0FBUztBQUNiOzs7QUR6RUosSUFBTUEsZ0JBQWUsT0FBTyxLQUFLLFlBQWU7QUFDaEQsSUFBTUMsb0JBQW1CLE9BQU8sS0FBSyxnQkFBbUI7QUFFakQsSUFBTSxVQUFVO0FBQUEsRUFDbkIsT0FBTztBQUFBLEVBQ1AsYUFBYTtBQUNqQjtBQUVBLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQ3hCLFNBQVM7QUFBQSxJQUNMLElBQUksRUFBRSxrQkFBa0IsTUFBTSxhQUFhLEtBQUssQ0FBQztBQUFBLElBQ2pELGVBQWU7QUFBQSxNQUNYLFNBQVMsQ0FBQyxFQUFFLEtBQUssa0NBQWtDLE1BQU0sSUFBSSxDQUFDO0FBQUEsSUFDbEUsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNILEtBQUs7QUFBQSxNQUNELE9BQU87QUFBQSxRQUNILE9BQU87QUFBQSxRQUNQLFNBQVM7QUFBQSxNQUNiO0FBQUEsSUFDSjtBQUFBLElBQ0EsV0FBVztBQUFBLElBQ1gsUUFBUTtBQUFBLElBQ1IsZUFBZTtBQUFBLE1BQ1gsVUFBVSxDQUFDLEdBQUdELGVBQWMsR0FBR0MsaUJBQWdCO0FBQUEsSUFDbkQ7QUFBQSxFQUNKO0FBQUEsRUFDQSxNQUFNO0FBQUEsSUFDRixhQUFhO0FBQUEsSUFDYixLQUFLO0FBQUEsSUFDTCxVQUFVO0FBQUEsTUFDTixLQUFLO0FBQUEsTUFDTCxVQUFVLENBQUMsUUFBUSxNQUFNO0FBQUEsTUFDekIsU0FBUyxDQUFDLGVBQWUsY0FBYztBQUFBLE1BQ3ZDLFNBQVMsQ0FBQyxrQkFBa0IsbUJBQW1CLGtCQUFrQixpQkFBaUI7QUFBQSxJQUN0RjtBQUFBLElBQ0EsWUFBWSxDQUFDLHFCQUFxQjtBQUFBLEVBQ3RDO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFsiZGVwZW5kZW5jaWVzIiwgInBlZXJEZXBlbmRlbmNpZXMiXQp9Cg==
